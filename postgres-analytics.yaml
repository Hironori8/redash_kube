apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-analytics-pvc
  namespace: redash
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-analytics-init-script
  namespace: redash
data:
  init-data.sql: |
    -- 実データ用テーブル作成とサンプルデータ投入

    -- ユーザーテーブル
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        first_name VARCHAR(50),
        last_name VARCHAR(50),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        is_active BOOLEAN DEFAULT true
    );

    -- 商品テーブル
    CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        description TEXT,
        price DECIMAL(10,2) NOT NULL,
        category VARCHAR(50),
        stock_quantity INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- 注文テーブル
    CREATE TABLE IF NOT EXISTS orders (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id),
        total_amount DECIMAL(10,2) NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        shipped_date TIMESTAMP NULL
    );

    -- 注文詳細テーブル
    CREATE TABLE IF NOT EXISTS order_items (
        id SERIAL PRIMARY KEY,
        order_id INTEGER REFERENCES orders(id),
        product_id INTEGER REFERENCES products(id),
        quantity INTEGER NOT NULL,
        unit_price DECIMAL(10,2) NOT NULL,
        total_price DECIMAL(10,2) NOT NULL
    );

    -- サンプルユーザーデータ
    INSERT INTO users (username, email, first_name, last_name) VALUES
    ('john_doe', 'john.doe@example.com', 'John', 'Doe'),
    ('jane_smith', 'jane.smith@example.com', 'Jane', 'Smith'),
    ('bob_johnson', 'bob.johnson@example.com', 'Bob', 'Johnson'),
    ('alice_brown', 'alice.brown@example.com', 'Alice', 'Brown'),
    ('charlie_wilson', 'charlie.wilson@example.com', 'Charlie', 'Wilson'),
    ('diana_davis', 'diana.davis@example.com', 'Diana', 'Davis'),
    ('frank_miller', 'frank.miller@example.com', 'Frank', 'Miller'),
    ('grace_taylor', 'grace.taylor@example.com', 'Grace', 'Taylor'),
    ('henry_anderson', 'henry.anderson@example.com', 'Henry', 'Anderson'),
    ('iris_thomas', 'iris.thomas@example.com', 'Iris', 'Thomas');

    -- サンプル商品データ
    INSERT INTO products (name, description, price, category, stock_quantity) VALUES
    ('MacBook Pro 16"', '高性能なプロフェッショナル向けノートPC', 329800.00, 'Electronics', 25),
    ('iPhone 15 Pro', '最新のスマートフォン', 159800.00, 'Electronics', 50),
    ('AirPods Pro', 'ノイズキャンセリング機能付きイヤホン', 36800.00, 'Electronics', 100),
    ('iPad Air', 'パワフルなタブレット', 84800.00, 'Electronics', 30),
    ('Apple Watch Series 9', 'スマートウォッチ', 59800.00, 'Electronics', 40),
    ('Magic Keyboard', 'ワイヤレスキーボード', 19800.00, 'Accessories', 75),
    ('Magic Mouse', 'ワイヤレスマウス', 11800.00, 'Accessories', 80),
    ('Studio Display', '27インチ 5K Retinaディスプレイ', 199800.00, 'Accessories', 15),
    ('Mac Studio', 'デスクトップコンピュータ', 249800.00, 'Electronics', 20),
    ('HomePod mini', 'コンパクトなスマートスピーカー', 11800.00, 'Electronics', 60);

    -- サンプル注文データ
    INSERT INTO orders (user_id, total_amount, status, order_date, shipped_date) VALUES
    (1, 389600.00, 'completed', '2024-01-15 10:30:00', '2024-01-16 14:20:00'),
    (2, 196600.00, 'completed', '2024-01-20 15:45:00', '2024-01-21 09:15:00'),
    (3, 459400.00, 'shipped', '2024-02-01 11:20:00', '2024-02-02 16:30:00'),
    (4, 119600.00, 'completed', '2024-02-10 09:15:00', '2024-02-11 13:45:00'),
    (5, 249800.00, 'pending', '2024-02-20 16:30:00', NULL),
    (1, 159800.00, 'completed', '2024-03-01 12:00:00', '2024-03-02 10:30:00'),
    (6, 84800.00, 'shipped', '2024-03-10 14:15:00', '2024-03-11 11:20:00'),
    (7, 329800.00, 'completed', '2024-03-15 10:45:00', '2024-03-16 15:30:00'),
    (8, 96400.00, 'pending', '2024-03-20 13:20:00', NULL),
    (9, 199800.00, 'shipped', '2024-03-25 11:30:00', '2024-03-26 14:15:00');

    -- サンプル注文詳細データ
    INSERT INTO order_items (order_id, product_id, quantity, unit_price, total_price) VALUES
    -- Order 1 (user 1)
    (1, 1, 1, 329800.00, 329800.00),
    (1, 6, 3, 19800.00, 59800.00),
    -- Order 2 (user 2)
    (2, 2, 1, 159800.00, 159800.00),
    (2, 3, 1, 36800.00, 36800.00),
    -- Order 3 (user 3)
    (3, 1, 1, 329800.00, 329800.00),
    (3, 4, 1, 84800.00, 84800.00),
    (3, 5, 1, 59800.00, 59800.00),
    -- Order 4 (user 4)
    (4, 2, 1, 159800.00, 159800.00),
    (4, 3, 1, 36800.00, 36800.00),
    -- Order 5 (user 5)
    (5, 9, 1, 249800.00, 249800.00),
    -- Order 6 (user 1)
    (6, 2, 1, 159800.00, 159800.00),
    -- Order 7 (user 6)
    (7, 4, 1, 84800.00, 84800.00),
    -- Order 8 (user 7)
    (8, 1, 1, 329800.00, 329800.00),
    -- Order 9 (user 8)
    (9, 5, 1, 59800.00, 59800.00),
    (9, 3, 1, 36800.00, 36800.00),
    -- Order 10 (user 9)
    (10, 8, 1, 199800.00, 199800.00);

    -- 分析用ビューの作成
    CREATE OR REPLACE VIEW order_summary AS
    SELECT 
        o.id as order_id,
        u.username,
        u.email,
        o.total_amount,
        o.status,
        o.order_date,
        o.shipped_date,
        COUNT(oi.id) as item_count
    FROM orders o
    JOIN users u ON o.user_id = u.id
    LEFT JOIN order_items oi ON o.id = oi.order_id
    GROUP BY o.id, u.username, u.email, o.total_amount, o.status, o.order_date, o.shipped_date
    ORDER BY o.order_date DESC;

    CREATE OR REPLACE VIEW product_sales AS
    SELECT 
        p.id,
        p.name,
        p.category,
        p.price,
        COALESCE(SUM(oi.quantity), 0) as total_sold,
        COALESCE(SUM(oi.total_price), 0) as total_revenue
    FROM products p
    LEFT JOIN order_items oi ON p.id = oi.product_id
    GROUP BY p.id, p.name, p.category, p.price
    ORDER BY total_revenue DESC;

    CREATE OR REPLACE VIEW monthly_sales AS
    SELECT 
        DATE_TRUNC('month', order_date) as month,
        COUNT(*) as order_count,
        SUM(total_amount) as total_revenue,
        AVG(total_amount) as avg_order_value
    FROM orders
    WHERE status != 'cancelled'
    GROUP BY DATE_TRUNC('month', order_date)
    ORDER BY month DESC;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-analytics
  namespace: redash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-analytics
  template:
    metadata:
      labels:
        app: postgres-analytics
    spec:
      containers:
      - name: postgres
        image: postgres:13
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: redash-secrets
              key: ANALYTICS_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: redash-secrets
              key: ANALYTICS_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redash-secrets
              key: ANALYTICS_PASSWORD
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-analytics-pvc
      - name: init-script
        configMap:
          name: postgres-analytics-init-script
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-analytics
  namespace: redash
spec:
  selector:
    app: postgres-analytics
  ports:
  - port: 5432
    targetPort: 5432